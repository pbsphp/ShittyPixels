
Примерный сценарий:
Пользователь авторизуется.
Перед ним полотно с точками (пикселями).
Пользователь жмет на любую точку полотна (пиксель), предварительно выбрав цвет. Цвет пикселя на полотне меняется. Изменения отображаются у всех пользователей, наблюдающих данное полотно. Далее у пользователя кулдаун, в течении которого он не может менять цвет пикселей.

Общие детали реализации:
Для масштабируемости, разные области полотна обрабатываются разными инстансами сервера. Инстанс сервера, вероятнее всего, хранит матрицу цветов в памяти, но иногда флашит на диск. Клиент при загрузке канваса получает информацию о том, какие фрагменты полотна какому серверу принадлежат. Например все точки в квадрате 0,0 - 100,100 - сервер instance0.example.com, точки 0,100-100,200 - сервер instance1.example.com.
Примечание: Для более равномерной нагрузки на инстансы, вероятно, лучше делить точки так: точка 0,0 - инстанс 0, точка 0,1 - инстанс1, 0,2 - снова инстанс0. В этом случае при повышенной активности пользователей в определенных областях полотна будет равномерно распределяться между инстансами.

Полотно, ориентировочно, на канвасе. Но можно для начала HTML таблицу, чтобы не возиться с зумом и т.п.
После загрузки полотна, клиент открывает web-socket соединение с каждым из инстансов сервера и запрашивает актуальные данные полотна. После этого при каждом изменении данных в инстансе, клиент получает оповещение об этом.
Примечание: Можно закрывать соединение с инстансами областей, которые не видны пользователю.
Пользователь жмет на один из пикселей полотна. Самостоятельно определяет, какому инстансу принадлежит точка. После этого, уведомляет инстанс об изменении цвета в точке. Инстанс меняет цвет в точке и уведомляет всех пользователей, кто к нему подключен. Пользователи получают информацию о том, что в точке X,Y значение цвета изменено.
Клиент получает кулдаун. Сервер также при изменении цвета всегда самостоятельно проверяет, может ли указанный пользователь изменить значение цвета, или же время с предыдущего "хода" еще не прошло.
